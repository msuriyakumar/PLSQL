declare 
V_num number (20):= 20;
V_star number(20):= 40;
V_cat number(20);
begin 
V_cat := V_num+V_star;
dbms_output.put_line('the addition is:' || V_cat);
end;

declare 
V_num number (20):= &V_num;
V_star number(20):= &V_star;
V_cat number(20);
begin 
V_cat := V_num+V_star;
dbms_output.put_line('the addition is:' || V_cat);
end;


declare 
V_num number (20);
V_star number(20);
V_cat number(20);
begin 
V_num:= 10;
V_star:=20;
V_cat := V_num+V_star;
dbms_output.put_line('the addition is:' || V_cat);
end;

create table ipl (
csk number(20) ,
Mi varchar(20),
RR varchar(20),
srh varchar(20)
);


declare
V_csk number(20);
V_mi varchar(20);
V_RR varchar(20);
V_srh varchar(20);
begin 
insert into ipl
values ('1','dhoni','thala','chepak');
dbms_output.put_line(' the values dhoni is added');
insert into ipl
values ('2','rohit','thala','chepak');
dbms_output.put_line(' the values rohit is added');
insert into ipl
values ('2','rutu','thala','chepak');
dbms_output.put_line(' the values rutu is added');


update ipl
set csk  = 7 where csk =1;
dbms_output.put_line('the value is updated');

select csk, mi, rr, srh into V_csk,V_mi,V_RR,V_srh from ipl where mi = 'dhoni';
dbms_output.put_line(' the thala is' || V_mi);
end;

select * from ipl;


--anchor datatype

declare
V_num ipl.csk%type;

--constant
declare
V_suriya constant number(20) default 100;
begin
dbms_output.put_line(' the values is :' || V_suriya);
end;

VARIABLE ret_val NUMBER
begin
    :ret_val:=4;
    end;
    /
print ret_val;

declare
V_star number (20):=&V_star;
V_dhini number(20):=&V_dhini;
begin
if (V_star<=10) or (V_dhini>=10)
then
 dbms_output.put_line(' the statement is true' || V_dhini );
 --else
 --dbms_output.put_line(' the stam is false');
 
 end if;
 dbms_output.put_line(' the stam is false');
 end;

declare 
V_star number (20):=&V_staar;
V_dhini number(20):=&V_dhini;
V_rohit number(20):=&V_rohit;
begin
if (V_star = 10)
then 
 dbms_output.put_line(' the statement is true' || V_star );
 elsif (V_dhini = 11)
 then 
  dbms_output.put_line(' the statement is true' || V_dhini );
  elsif (V_rohit =12)
  then
    dbms_output.put_line(' the statement is true' || V_rohit );
  else
        dbms_output.put_line(' tnothis is correct:' ||V_star ||V_dhini||V_rohit );
        end if;
        end;

declare
V_number number(20):= &V_number;
--V_bro number(20):= &V_tube;
begin
if mod (V_number,2) = 0
then 
dbms_output.put_line(' the value is even:' ||V_number);
else
dbms_output.put_line(' the value is odd:'|| V_number);
end if;
end;
  
declare
V_number number := 0;
V_values number ;
begin
loop
V_number := V_number + 1;
V_values:= 3* V_number;
dbms_output.put_line('3' || 'X' || V_number || '=' || V_values);
if ( V_number >= 20)
then 
exit;
end if;
end loop;
end;

declare
V_number number := 1;
V_values number ;
begin

while(V_number <= 10)loop
V_values := 4*V_number;
dbms_output.put_line('4' || 'X' || V_number || '=' || V_values);
V_number:= V_number +1;
end loop;
end;

begin 
for V_num in 1 ..10 loop
dbms_output.put_line(' the values is ' || V_num );
end loop;
end;



declare
V_num number(20);
begin
--V_num := 5*V_suriya ;
for V_suriya in 1 .. 10 loop
V_num := 5*V_suriya ;
dbms_output.put_line('5' || 'X' || V_suriya || '=' || V_num);
end loop;
end;


declare
V_num number;
begin 
for V_suriya  in 1 .. 20 loop
if mod( V_suriya,2) = 0
then
continue;
end if;
dbms_output.put_line(V_suriya);
end loop;
end;

begin 
for V_star in 1 .. 20 loop
if mod (V_star, 2) = 1 then
continue;
end if;
dbms_output.put_line(V_star);
end loop;
end;

<<outer>>
declare
V_number number :=20;
V_starr varchar(20) := 'suriya';
V_dob date := sysdate;
begin 
declare
V_number number := 200;
V_star varchar(20) := 'ajith';
V_dob date := sysdate;
begin
dbms_output.put_line('the values is' || V_star);
dbms_output.put_line('the values is' || V_starr);
dbms_output.put_line('the values is' ||outer. V_dob);
end;
dbms_output.put_line('the values is' || V_dob);
dbms_output.put_line('the values is' || V_dob);
end;

declare
V_num zero.matter%type;
V_star V_num%type;
V_motor zero.motor_name%type;
V_salesman_name V_motor%type;
begin
insert into zero
values ('1111','00011','honada','maadan');
dbms_output.put_line('the values is inserted');
insert into zero
values ('1112','00022','yamaaha','maodi');
dbms_output.put_line('the values is inserted');
insert into zero
values ('1113','00031','suzuahi','taom');
dbms_output.put_line('the values is inserted');
select * into V_num,V_star,V_motor,V_salesman_name from zero where motor_name = 'yamaha';
dbms_output.put_line('the value is inserted:' || V_salesman_name );
end;

select * from zero;


declare
V_hunter zero %rowtype;
begin
select * into V_hunter from zero where motor_name = 'yamaha';
dbms_output.put_line(V_hunter. salesman_name);
end;

--- index by table or associative array
declare
type V_index is table of varchar2(20)
index by simple_integer;

V_star V_index;

begin

V_star(1):= 'suriya';
V_star(20):='kumar';
dbms_output.put_line(V_star(20));
end;
/


select * from election;
-- by using %rowtype
declare
type V_boomer is table of election%rowtype
index by simple_integer;
V_hut V_boomer;
begin
select * into V_hut(3) from election where states = 'Liverpool';
dbms_output.put_line(V_hut(3).nation);
end;

-- by using %type
declare
type V_boomer is table of election.lastname%type
index by simple_integer;
V_hut V_boomer;
begin
select lastname into V_hut(3) from election where states = 'Liverpool';
dbms_output.put_line(V_hut(3));
end;

---nested table

declare
type V_nest is table of varchar2(20);
V_iron V_nest := V_nest();
begin
V_iron.extend(20);
V_iron(11) := 'mass';
V_iron(12) := 'tom';
dbms_output.put_line(V_iron(11));
end;
/

-- with array
declare
type V_nest is table of Varchar2(20);
 V_sun V_nest := V_nest('the','hunter');
 begin
 V_sun.extend(20);
 dbms_output.put_line(V_sun(1) ||' '|| V_sun(2));
 end;
 /
 
 -- using %rowtype
  declare 
  type V_git is table of election%rowtype;
  V_hub V_git := V_git();
  begin
  V_hub.extend(20);
  select * into V_hub(1) from election where suriya = 'vijay';
  dbms_output.put_line(V_hub(1).lastname);
  end;
  /
  
  -- using %type
  declare
  type V_bug is table of election.nation%type;
  V_hit V_bug := V_bug();
  begin
  V_hit.extend(20);
  select nation into V_hit(1) from election where suriya = 'vijay';
  dbms_output.put_line(V_hit(1));
  end;
  /
 --varray
  declare
  type V_array is varray(20) of varchar2(20);
  V_moon V_array;
  begin
  V_moon:=V_array();
  V_moon.extend(10);
  V_moon(1):= 'star';
  V_moon(2):= 'bud';
  dbms_output.put_line(V_moon(1));
  end;
  

--collection method 


-- count in index by array
declare 
type V_chn is table of varchar2(20)
index by simple_integer;
 
V_rcb V_chn;

begin

V_rcb(1):= 'virat';
V_rcb(2):= 'faf';

dbms_output.put_line(V_rcb.count);
end;
  
-- count in nested table

declare
 
type V_ck is table of varchar2(20);
 V_msd V_ck := V_ck();
 begin
 V_msd.extend(7);
 V_msd(1):='hut';
 V_msd(2):='ter';
 dbms_output.put_line(V_msd.count);
 end;
 
--- count in varray

declare
type V_kkr is varray(20)of varchar2(20);
V_srh V_kkr;
begin
V_srh:=V_kkr();
V_srh.extend(5);
V_srh(1):= 'hahi';
dbms_output.put_line(V_srh.count);
end;
  
 --- first
 
 declare 
type V_chn is table of varchar2(20)
index by simple_integer;
 
V_rcb V_chn;

begin
V_rcb(4):= 'viraat';

V_rcb(1):= 'virat';
V_rcb(6):= 'faf';
V_rcb(5):= 'fbf';

dbms_output.put_line(V_rcb.first);
end;
  
--- last
 declare 
type V_chn is table of varchar2(20)
index by simple_integer;
 
V_rcb V_chn;

begin
V_rcb(4):= 'viraat';

V_rcb(1):= 'virat';
V_rcb(6):= 'faf';
V_rcb(5):= 'fbf';

dbms_output.put_line(V_rcb.last);
end;
 
 
--- exist
 declare 
type V_chn is table of varchar2(20)
index by simple_integer;
 
V_rcb V_chn;

begin
V_rcb(4):= 'viraat';

V_rcb(1):= 'virat';
V_rcb(6):= 'faf';
V_rcb(5):= 'fbf';
if V_rcb.exists(60) = true
then
dbms_output.put_line(' the values is there');
else
dbms_output.put_line(' the values is not there');
end if;
--dbms_output.put_line(V_rcb.last);
end;
  
 -- prior
  declare 
type V_chn is table of varchar2(20)
index by simple_integer;
 
V_rcb V_chn;

begin
V_rcb(4):= 'viraat';

V_rcb(1):= 'virat';
V_rcb(6):= 'faf';
V_rcb(5):= 'fbf';

dbms_output.put_line(V_rcb.prior(5));
end;


--next
 declare 
type V_chn is table of varchar2(20)
index by simple_integer;
 
V_rcb V_chn;

begin
V_rcb(4):= 'viraat';

V_rcb(1):= 'virat';
V_rcb(6):= 'faf';
V_rcb(5):= 'fbf';

dbms_output.put_line(V_rcb.next(1));
end;
  
  
-- limit
declare
type V_kkr is varray(20)of varchar2(20);
V_srh V_kkr;
begin
V_srh:=V_kkr();
V_srh.extend(5);
V_srh(1):= 'hahi';
dbms_output.put_line(V_srh.limit);
end;
--trim
declare
type V_kkr is varray(20)of varchar2(20);
V_srh V_kkr;
begin
V_srh:=V_kkr();
V_srh.extend(5);
V_srh(1):= 'hahi';
dbms_output.put_line(V_srh.count);
V_srh.trim;
dbms_output.put_line(V_srh.count);

end;

--trim(n)
declare
type V_kkr is varray(20)of varchar2(20);
V_srh V_kkr;
begin
V_srh:=V_kkr();
V_srh.extend(5);
V_srh(1):= 'hahi';
dbms_output.put_line(V_srh.count);
V_srh.trim(2);
dbms_output.put_line(V_srh.count);

end;


--delete
declare
type V_kkr is varray(20)of varchar2(20);
V_srh V_kkr;
begin
V_srh:=V_kkr();
V_srh.extend(5);
V_srh(1):= 'hahi';
dbms_output.put_line(V_srh.count);
V_srh.delete;
dbms_output.put_line(V_srh.count);
end;

-- delete()
declare
type V_kkr is table of varchar2(20);
V_srh V_kkr:=V_kkr();
begin
V_srh.extend(5);
V_srh(1):= 'hahi';
V_srh(2):= 'haaahi';
V_srh(3):= 'haahi';
dbms_output.put_line(V_srh.count);
V_srh.delete(1);
dbms_output.put_line(V_srh.count);
end;

-- multiset operator
declare
type V_emp is table of varchar2(20);
V_emp1 V_emp:= V_emp(1,2,3,4,5,6,11,12);
V_emp2 V_emp:= V_emp(1,2,3,4,5,6,7,8,9);
V_emp3 V_emp;
begin
V_emp3:= V_emp2 multiset union V_emp1;
for i in V_emp3.first .. V_emp3.last loop
dbms_output.put_line(V_emp3(i));
end loop;
end;


 declare
 V_moon varchar(20) :='sonn';
 begin
 case V_moon
 when 'son' then dbms_output.put_line ('the value is there');
 when 'star' then  dbms_output.put_line('the value is not there');
 else
 dbms_output.put_line('absent');
 end case;
 end;
 -- case expression statement
 declare
 V_jett varchar(20):='dash';
 V_sage varchar(20);
 begin
 V_sage := case V_jett
           when 'dash' then 'yes'
           when 'blade' then 'no'
           when 'fly' then 'alter'
           end;
dbms_output.put_line(V_sage);
end;

--trigger
create table iipl(
csk varchar(20),
rcb varchar(20),
mi varchar(20),
rr varchar(20)
);
create or replace trigger V_trigger
before insert on iipl
for each row
enable
declare
V_tri varchar(20);
begin 
select user into V_tri from dual;
dbms_output.put_line('you have inserted the values' || ' ' ||  V_tri);
end;
/
insert into iipl 
values('dhonii','kholii','rohiit','sanjuu'); 

--
create or replace trigger VV_triggerrr
before insert or update or delete on iipl
for each row
enable
declare
V_cup varchar(20);
begin 
select user into V_cup from dual;
if inserting then
dbms_output.put_line(' you have inserted the value:' || V_cup);
elsif updating then
dbms_output.put_line(' you have updated the values:' || V_cup);
elsif deleting then
dbms_output.put_line(' you have deleted the values:' || V_cup);
end if;
end;

insert into iipl 
values ('rutu','faf','dk','buttler');

update iipl
set rcb = 'sirja' 
where rcb = 'kholii';

--- audting trigger

create table zoooo(
A_ID Varchar(20)
);
create table V_zooo(
new_animal varchar(20),
old_animal varchar(20),
user_n varchar(20),
entry_date varchar(20),
operation varchar(20)
);

create or replace trigger V_trizooo
before insert or delete or update on zoooo
for each row
enable
declare
V_user varchar(20);
V_entry_date varchar(20);
begin
select user, to_char(sysdate,'dd/mon/yyyy HH24:mm:SS') into V_user,V_entry_date from dual;
if inserting then
insert into V_zooo(new_animal,old_animal,user_n,entry_date,operation)
values (:new.A_ID,null,V_user,V_entry_date,'insert');
end if;
end;


select *  from  V_zooo;


insert into zoooo
values ('tigerr');

--for back up
create table superheroes(
V_name varchar2(20)
);

create table superheroes_backup(
V_star varchar2(20)
);

create or replace trigger V_super
before insert or delete or update on superheroes
for each row
enable
begin
if inserting then
insert into superheroes_backup(V_star) values (:new.V_name);
elsif updating then
update superheroes_backup set V_star = :new.V_name where V_star = :old.V_name;
elsif deleting then
delete from superheroes_backup where V_star = :old.V_name;
end if; 
end;


insert into superheroes 
values('superman');


select * from superheroes;
select * from superheroes_backup;


--ddl trigger
create or replace trigger DDL_trigger
after DDL on SCHEMA
begin
insert into DDL_tri values(
sysdate,
sys_context('userenv' , 'current_user'),
ora_dict_obj_type,
ora_dict_obj_name,
ora_sysevent
);
end;


create table V_test(
V_hide number);
drop table V_test;
select * from DDL_tri;

------------------------------------
create table youtube(
channel VARCHAR2(20),
sub varchar(20),
c_name varchar(20)
);

create or replace trigger youtri
before insert or update or delete on youtube
for each row
enable
declare
V_user varchar2(20);
V_date varchar2(20);
begin
select user, to_char(sysdate, 'HH:MM:SS') into V_user,V_date from dual;
if inserting then
dbms_output.put_line('you have inserted the value:' || V_user);
end if;
end;

insert into youtube
values
('sir','jun','hum');
--- backup
create table valorant(
Player varchar(20));

create table Myvalo(
playername varchar2(20),
playerID int,
userID varchar(20),
logintime varchar2(20)
);

create or replace trigger Iam
before insert or delete or update on valorant
for each row
enable
declare
V_user varchar2(20);
V_date varchar2(20);
begin
select user,to_char(sysdate, 'HH24:MM:SS') into V_user,V_date from dual;
if inserting then
insert into myvalo(playername,playerID,userID,logintime)
values(:new.player,'100',V_user,V_date);
elsif updating then
update myvalo set playername = :new.player where playername = :old.player;
elsif deleting then
delete from Myvalo where playername = :old.player;
end if;
end;


select * from myvalo;
insert into valorant 
values ('jettt');

update valorant
set Player = 'ajith'
where player = 'jettt';

delete from valorant
where player = 'jett';

create table gamers(
playerID varchar(20)
);
--audit
create table V_gamer(
V_player varchar(20),
V_user varchar(20),
V_login varchar(20),
operation varchar(20)
);

create or replace trigger V_game
before insert or update or delete on gamers
for each row
enable
declare
VV_user varchar(20);
V_date varchar(20);
begin
select user, to_char(sysdate,'HH:MM:SS') into VV_user,V_date from dual;
if inserting then
insert into V_gamer(V_player,V_user,V_login,operation)
values(:new.playerID,VV_user,V_date,'insert');
elsif updating then
insert into V_gamer(V_player,V_user,V_login,operation)
values(:new.playerID,VV_user,V_date,'update');
elsif deleting then
insert into V_gamer(V_player,V_user,V_login,operation)
values(:new.playerID,VV_user,V_date,'delete');
end if;
end;

insert into gamers 
values
('suriya');


select * from V_gamer;


update gamers set playerID = 'chaaran'
where playerID='charan';

-- DDL
create table DDD_L(
V_event varchar(20),
V_date date,
V_user varchar(20),
V_obj varchar(20),
V_type varchar2(20)
);

create or replace trigger DDLtri
after DDL on schema
begin
insert into DDD_L 
values (
ora_sysevent,
sysdate,
sys_context('userenv', 'current_user'),
ora_dict_obj_name,
ora_dict_obj_type);
end;

create table vard(
name_V varchar(20));

truncate table vard;

select * from DDD_L;

-- logon trigger
create table LOG_on(
log_on_event varchar2(20),
log_on_time varchar2(20),
log_on_date date,
log_off_time varchar2(20),
log_off_date date
);

create or replace trigger Log_on__trigger
after logon on database
begin
insert into LOG_on values(
ora_sysevent,
to_char('sysdate','HH:MM:ss'),
sysdate,
null,
null);
--commit;
end;


--log off trigger

create table V_logoff(
V_event varchar(20),
logon_time date,
logone_user varchar(20),
loggoff_time date,
Logoff_user varchar(20));


create or replace trigger logg_off
before logoff on database
begin 
insert into V_logoff values(
ora_sysevent,
null,
null,
sysdate,
sys_context('userenv','current_user')
);
commit;
end;


---start up
create table starup_v(
V_event varchar(20),
V_date date,
V_time varchar(20),
user_V varchar(20),
V_type varchar(20)
);

create or replace trigger V_start
after startup on database
begin
insert into starup_v values(
ora_sysevent,
sysdate,
to_char('sysdate','HH24:MM:SS'),
sys_context('userenv','current_user'),
ora_dict_obj_type
);
end;
--instead of insert

--table 1
create table learner(
V_stud varchar(20)
);
---table 2
create table subject(
V_sub varchar(20)
);
---create view
create view V_vview as
select V_stud,V_sub from learner,subject;

--create trigger
create or replace trigger V_ram
instead  of insert on V_vview
for each row
begin
insert into learner (V_stud) values (:new.V_stud);
insert into subject (V_sub) values (:new.V_sub);
end;

insert into V_vview values ('suriya','oracle');

select * from learner;

select * from subject;

-- instead of update

create or replace trigger V_up
instead of update on V_vview
for each row
begin
update learner set V_stud = :new.V_stud where V_stud = :old.V_stud;
update subject set V_sub = :new.V_sub where V_sub = :old.V_sub;
end;

update learner 
set V_stud = 'mastr'
where V_stud = 'suriya';

select * from learner;


--instead of delete
create or replace trigger V_dele
instead of delete on V_vview
for each row
begin 
delete from learner where V_stud = :old.V_stud;
end;


delete from learner where V_stud = 'mastr';

--cursor
create table coc(
player_ID number,
Player_name varchar(20),
player_age int,
player_g varchar(20)
);

insert into coc values('100','archer','2','female');
insert into coc values('101','barbarian','3','male');
insert into coc values('102','goblin','4','male');
insert into coc values('103','healer','10','female');
insert into coc values('104','dragon','20','male');

----explicit cursor
set serveroutput on;
declare
V_coc varchar(20);
cursor V_cursor is
select player_name from coc 
where player_age<10;
begin
open V_cursor;
loop
fetch V_cursor into V_coc;
dbms_output.put_line(V_coc);
exit when V_cursor%notfound;
end loop;
close V_cursor;
end;